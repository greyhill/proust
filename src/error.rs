#[derive(Debug)]
pub enum Error {
    DeviceNotFound,
    DeviceNotAvailable,
    CompilerNotAvailable,
    MemObjectAllocationFailure,
    OutOfResources,
    OutOfHostMemory,
    ProfilingInfoNotAvailable,
    MemCopyOverlap,
    ImageFormatMismatch,
    ImageFormatNotSupported,
    BuildProgramFailure(String),
    MapFailure,
    MisalignedSubBufferOffset,
    ExecStatusErrorForEventsInWaitList,
    InvalidValue,
    InvalidDeviceType,
    InvalidPlatform,
    InvalidDevice,
    InvalidContext,
    InvalidQueueProperties,
    InvalidCommandQueue,
    InvalidHostPtr,
    InvalidMemObject,
    InvalidImageFormatDescriptor,
    InvalidImageSize,
    InvalidSampler,
    InvalidBinary,
    InvalidBuildOptions,
    InvalidProgram,
    InvalidProgramExecutable,
    InvalidKernelName,
    InvalidKernelDefinition,
    InvalidKernel,
    InvalidArgIndex,
    InvalidArgValue,
    InvalidArgSize,
    InvalidKernelArgs,
    InvalidWorkDimension,
    InvalidWorkGroupSize,
    InvalidWorkItemSize,
    InvalidGlobalOffset,
    InvalidEventWaitList,
    InvalidEvent,
    InvalidOperation,
    InvalidGLObject,
    InvalidBufferSize,
    InvalidMIPLevel,
    InvalidGlobalWorkSize,
    InvalidProperty,
    UnknownError,
}

impl Error {
    pub fn check(id: i32) -> Result<(), Error> {
        use self::Error::*;
        match id {
            0 => Ok(()),
            -1 => Err(DeviceNotFound),
            -2 => Err(DeviceNotAvailable),
            -3 => Err(CompilerNotAvailable),
            -4 => Err(MemObjectAllocationFailure),
            -5 => Err(OutOfResources),
            -6 => Err(OutOfHostMemory),
            -7 => Err(ProfilingInfoNotAvailable),
            -8 => Err(MemCopyOverlap),
            -9 => Err(ImageFormatMismatch),
            -10 => Err(ImageFormatNotSupported),
            -11 => Err(BuildProgramFailure(String::from("No log available"))),
            -12 => Err(MapFailure),
            -13 => Err(MisalignedSubBufferOffset),
            -14 => Err(ExecStatusErrorForEventsInWaitList),
            -30 => Err(InvalidValue),
            -31 => Err(InvalidDeviceType),
            -32 => Err(InvalidPlatform),
            -33 => Err(InvalidDevice),
            -34 => Err(InvalidContext),
            -35 => Err(InvalidQueueProperties),
            -36 => Err(InvalidCommandQueue),
            -37 => Err(InvalidHostPtr),
            -38 => Err(InvalidMemObject),
            -39 => Err(InvalidImageFormatDescriptor),
            -40 => Err(InvalidImageSize),
            -41 => Err(InvalidSampler),
            -42 => Err(InvalidBinary),
            -43 => Err(InvalidBuildOptions),
            -44 => Err(InvalidProgram),
            -45 => Err(InvalidProgramExecutable),
            -46 => Err(InvalidKernelName),
            -47 => Err(InvalidKernelDefinition),
            -48 => Err(InvalidKernel),
            -49 => Err(InvalidArgIndex),
            -50 => Err(InvalidArgValue),
            -51 => Err(InvalidArgSize),
            -52 => Err(InvalidKernelArgs),
            -53 => Err(InvalidWorkDimension),
            -54 => Err(InvalidWorkGroupSize),
            -55 => Err(InvalidWorkItemSize),
            -56 => Err(InvalidGlobalOffset),
            -57 => Err(InvalidEventWaitList),
            -58 => Err(InvalidEvent),
            -59 => Err(InvalidOperation),
            -60 => Err(InvalidGLObject),
            -61 => Err(InvalidBufferSize),
            -62 => Err(InvalidMIPLevel),
            -63 => Err(InvalidGlobalWorkSize),
            -64 => Err(InvalidProperty),
            _ => Err(UnknownError),
        }
    }
}

